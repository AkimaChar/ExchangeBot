import axios from "axios";

export function setAmountToExchange(bot, prev_msg, menuStates) {
	const regexp = /(\d+\.\d+)|(\d+)/g;
	menuStates.push(prev_msg);
	bot.editMessageText("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, 100", {
		chat_id: prev_msg.chat.id,
		message_id: prev_msg.message_id,
		reply_markup: {
			inline_keyboard: [
				[
					{
						text: "–ù–∞–∑–∞–¥",
						callback_data: "/back",
					},
				],
			],
		},
	});
	bot.onText(regexp, (msg, match) => {
		//TODO: Add calculating exchange rate
		bot.editMessageText("–í—ã –∑–∞–ø–ª–∞—Ç–∏—Ç–µ ", {
			chat_id: menuStates[menuStates.length - 1].chat.id,
			message_id: menuStates[menuStates.length - 1].message_id,
			reply_markup: {
				inline_keyboard: [
					[
						{
							text: "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É",
							callback_data: "/requestconsult",
						},
					],
					[
						{
							text: "–ù–∞–∑–∞–¥",
							callback_data: "/back",
						},
					],
				],
			},
		});
		bot.removeTextListener(regexp);
	});
}
export function chooseCryptoToBuy(bot, prev_msg, menuStates) {
	//TODO: Add creating request body
	menuStates.push(prev_msg);
	bot.editMessageText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", {
		chat_id: prev_msg.chat.id,
		message_id: prev_msg.message_id,
		reply_markup: {
			inline_keyboard: [
				[
					{
						text: "–ö—É–ø–∏—Ç—å USDt",
						callback_data: "/setamount",
					},
					{
						text: "–ö—É–ø–∏—Ç—å Bitcoin",
						callback_data: "/setamount",
					},
					{
						text: "–ö—É–ø–∏—Ç—å Ethereum",
						callback_data: "/setamount",
					},
				],
				[
					{
						text: "–ù–∞–∑–∞–¥",
						callback_data: "/back",
					},
				],
			],
		},
	});
}
export function chooseCryptoToSell(bot, prev_msg, menuStates) {
	//TODO: Add creating request body
	menuStates.push(prev_msg);
	bot.editMessageText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", {
		chat_id: prev_msg.chat.id,
		message_id: prev_msg.message_id,
		reply_markup: {
			inline_keyboard: [
				[
					{
						text: "–ü—Ä–æ–¥–∞—Ç—å USDt",
						callback_data: "/setamount",
					},
					{
						text: "–ü—Ä–æ–¥–∞—Ç—å Bitcoin",
						callback_data: "/setamount",
					},
					{
						text: "–ü—Ä–æ–¥–∞—Ç—å Ethereum",
						callback_data: "/setamount",
					},
				],
				[
					{
						text: "–ù–∞–∑–∞–¥",
						callback_data: "/back",
					},
				],
			],
		},
	});
}
export function sendConsultRequest(bot, prev_msg, menuStates) {
	//TODO: Add manager notification functionality (request text, sender id, time)
	menuStates.push(prev_msg);
	bot.editMessageText("–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ üòâ", {
		chat_id: prev_msg.chat.id,
		message_id: prev_msg.message_id,
		reply_markup: {
			inline_keyboard: [
				//TODO: Ask about button functionality
				[
					{
						text: "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
						callback_data: "/mainmenu",
					},
				],
			],
		},
	});
}
export function orderExchange(bot, prev_msg, menuStates) {
	menuStates.push(prev_msg);
	bot.editMessageText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", {
		chat_id: prev_msg.chat.id,
		message_id: prev_msg.message_id,
		reply_markup: {
			inline_keyboard: [
				[
					{
						text: "–Ø —Ö–æ—á—É –∫—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É",
						callback_data: "/buycrypto",
					},
				],
				[
					{
						text: "–Ø —Ö–æ—á—É –ø—Ä–æ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É",
						callback_data: "/sellcrypto",
					},
				],
				[
					{
						text: "–ù–∞–∑–∞–¥",
						callback_data: "/back",
					},
				],
			],
		},
	});
}
export async function showExchangeRates(bot, prev_msg, menuStates) {
	menuStates.push(prev_msg);
	bot.editMessageText(await _Rate_Values(), {
		chat_id: prev_msg.chat.id,
		message_id: prev_msg.message_id,
		parse_mode: "HTML",
		reply_markup: {
			inline_keyboard: [
				[
					{
						text: "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±–º–µ–Ω",
						callback_data: "/orderexchange",
					},
				],
				[
					{
						text: "–ù–∞–∑–∞–¥",
						callback_data: "/back",
					},
				],
			],
		},
	});
}

async function _Rate_Values() {
	//! Problem with getting usdt/rub rate
	//TODO: Add rounding to values
	//TODO: Add new currencies to show
	//TODO: Add update interval
	let sellUSDt_USD = 0;
	let buyUSDt_USD = 0;
	let sellUSDt_RUB = 0;
	let buyUSDt_RUB = 0;
	try {
		await axios.get("https://garantex.io/api/v2/depth?market=usdtusd").then((response) => {
			Object.values(response.data.asks).map((el, i) => {
				if (i < 5) sellUSDt_USD += +el.price;
			});
			Object.values(response.data.bids).map((el, i) => {
				if (i < 5) buyUSDt_USD += +el.price;
			});
			sellUSDt_USD = (
				(sellUSDt_USD / 5 - (1.0 / (sellUSDt_USD / 5)) * serviceFee) *
				1.02
			).toFixed(floatRound);
			buyUSDt_USD = (buyUSDt_USD / 5 - (1.0 / (buyUSDt_USD / 5)) * serviceFee).toFixed(
				floatRound
			);
		});
		await axios.get("https://garantex.io/api/v2/depth?market=usdtrub").then((response) => {
			Object.values(response.data.asks).map((el, i) => {
				if (i < 5) sellUSDt_RUB += +el.price;
			});
			Object.values(response.data.bids).map((el, i) => {
				if (i < 5) buyUSDt_RUB += +el.price;
			});
			sellUSDt_RUB = (
				(sellUSDt_RUB / 5 - (10 / (sellUSDt_RUB / 5)) * serviceFee) *
				1.02
			).toFixed(floatRound);
			buyUSDt_RUB = (buyUSDt_RUB / 5 - (10 / (buyUSDt_RUB / 5)) * serviceFee).toFixed(
				floatRound
			);
		});
	} catch (err) {
		console.log(err);
	}
	return `
    –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å\n(–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ)\n\n<b><u>USDt/RUB</u></b>\n\n–ü–æ–∫—É–ø–∫–∞: <b>${buyUSDt_RUB}‚ÇΩ</b>\n–ü—Ä–æ–¥–∞–∂–∞: <b>${sellUSDt_RUB}‚ÇΩ</b>\n\n<b><u>USDt/USD</u></b>\n\n–ü–æ–∫—É–ø–∫–∞: <b>${buyUSDt_USD}$</b>\n–ü—Ä–æ–¥–∞–∂–∞: <b>${sellUSDt_USD}$</b>\n\n
    `;
}
